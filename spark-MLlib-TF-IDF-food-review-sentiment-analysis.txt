val rdd = sc.textFile("food_reviews/Reviews.csv")

val rdd1 = rdd.map(x => x.replaceAll("\"\"",""))

rdd1.saveAsTextFile("food_reviews.csv")

hadoop@vspark:~$ cd food_reviews.csv

hadoop@vspark:~/food_reviews.csv$ cat part-00000 part-00001 part-00002 part-00003 part-00004 part-00005 part-00006 part-00007 part-00008 >../food_reviews.csv

----------------------------------------

val df = spark.read.format("csv").option("header","true").option("quoteAll","true").load("prod_reviews.csv")

scala> df.printSchema()
root
 |-- Id: string (nullable = true)
 |-- ProductId: string (nullable = true)
 |-- UserId: string (nullable = true)
 |-- ProfileName: string (nullable = true)
 |-- HelpfulnessNumerator: string (nullable = true)
 |-- HelpfulnessDenominator: string (nullable = true)
 |-- Score: string (nullable = true)
 |-- Time: string (nullable = true)
 |-- Summary: string (nullable = true)
 |-- Text: string (nullable = true)
 

scala> df.select("Score","Text").show()
+-----+--------------------+
|Score|                Text|
+-----+--------------------+
|    5|I have bought sev...|
|    1|Product arrived l...|
|    4|This is a confect...|
|    2|If you are lookin...|
|    5|Great taffy at a ...|
|    4|I got a wild hair...|
|    5|This saltwater ta...|
|    5|This taffy is so ...|
|    5|Right now I'm mos...|
|    5|This is a very he...|
|    5|I don't know if i...|
|    5|One of my boys ne...|
|    1|My cats have been...|
|    4|good flavor! thes...|
|    5|The Strawberry Tw...|
|    5|My daughter loves...|
|    2|I love eating the...|
|    5|I am very satisfi...|
|    5|Twizzlers, Strawb...|
|    5|Candy was deliver...|
+-----+--------------------+
only showing top 20 rows

scala> df.select("Score").count
res4: Long = 568454


scala> df.groupBy("Score").count.show
+-----+------+
|Score| count|
+-----+------+
|    3| 42640|
| null|     2|
|    5|363120|
|    1| 52268|
|    4| 80655|
|    2| 29769|
+-----+------+

scala> df.where("Score is not null").count
res8: Long = 568452


val rdd = df.where("Score is not null").select("Score","Text").rdd

val rdd2 = rdd.map( x => Array(x(1).toString,x(0).toString))

val categories = rdd2.map(x => x(1)).distinct.zipWithIndex.collect.toMap

-- remove nonword characters (such as punctuation).
val nonWordSplit = rdd2.flatMap(x => x(0).split("""\W+""").map(_.toLowerCase))
nonWordSplit.sample(true, 0.3, 42).take(100).mkString(",")
nonWordSplit.distinct.count  // 120383

-- filter out numbers and tokens that are words mixed with numbers
val regex = """[^0-9]*""".r
val filterNumbers = nonWordSplit.filter(token => regex.pattern.matcher(token).matches)
filterNumbers.distinct.sample(false, 0.3, 42).take(100).mkString("\n")
filterNumbers.distinct.count  // 106816

-- list highest occurrence of words to get an idea which stop words to be removed
val tokenCounts = filterNumbers.map(t => (t, 1)).reduceByKey(_ + _)
val orderingDesc = Ordering.by[(String, Int), Int](_._2)
tokenCounts.top(20)(orderingDesc).mkString("\n")

-- remove stop words
val stopwords = Set(
 "","the","a","an","of","or","in","for","by","on","but", "is", "not", "with", "as", "was", "if",
 "they", "are", "this", "and", "it", "have", "from", "at", "my", "be", "that", "to"
)
val tokenCountsFilteredStopwords = tokenCounts.filter { case(k, v) => !stopwords.contains(k) }
tokenCountsFilteredStopwords.top(20)(orderingDesc).mkString("\n")

-- remove tokens with one-character length
val tokenCountsFilteredSize = tokenCountsFilteredStopwords.filter { case (k, v) => k.size >= 2 }
tokenCountsFilteredSize.top(20)(orderingDesc).mkString("\n")

-- list terms with only one-occurrence
val orderingAsc = Ordering.by[(String, Int), Int](-_._2)
tokenCountsFilteredSize.top(20)(orderingAsc).mkString("\n")

-- remove terms with only one-occurrence
val rareTokens = tokenCounts.filter{ case (k, v) => v < 2 }.map{ case (k, v) => k }.collect.toSet
val tokenCountsFilteredAll = tokenCountsFilteredSize.filter { case (k, v) => !rareTokens.contains(k) }
tokenCountsFilteredAll.top(20)(orderingAsc).mkString("\n")

tokenCountsFilteredAll.count
res24: Long = 64978

def tokenize(line: String): Seq[String] = {
 line.split("""\W+""")
 .map(_.toLowerCase)
 .filter(token => regex.pattern.matcher(token).matches)
 .filterNot(token => stopwords.contains(token))
 .filterNot(token => rareTokens.contains(token))
 .filter(token => token.size >= 2)
 .toSeq
}

rdd2.flatMap(x => tokenize(x(0))).distinct.count
res27: Long = 64978


val sets = rdd2.randomSplit(Array(0.8,0.2))
val trainSet = sets(0)
val testSet = sets(1)

val tokens = trainSet.map(x => tokenize(x(0)))
tokens.cache
tokens.first.take(20)

---------------------------

import org.apache.spark.mllib.linalg.{ SparseVector => SV }
import org.apache.spark.mllib.feature.HashingTF
import org.apache.spark.mllib.feature.IDF

val dim = math.pow(2, 17).toInt
val hashingTF = new HashingTF(dim)

-- transform function of HashingTF maps each input document (that is, a sequence of tokens) to an MLlib Vector.
val tf = hashingTF.transform(tokens)
tf.cache

val v = tf.first.asInstanceOf[SV]
v.size
v.values.size
println(v.values.take(10).toSeq)
println(v.indices.take(10).toSeq)

-- compute the inverse document frequency for each term in the corpus
-- by creating a new IDF instance and calling fit with our RDD of term frequency
-- vectors as the input. We will then transform our term frequency vectors to TF-IDF
-- vectors through the transform function of IDF:

val idf = new IDF().fit(tf)
val tfidf = idf.transform(tf)
val v2 = tfidf.first.asInstanceOf[SV]
println(v2.values.size)
println(v2.values.take(10).toSeq)
println(v2.indices.take(10).toSeq)

--------------------------------

import org.apache.spark.mllib.regression.LabeledPoint

val zippedTrain = trainSet.zip(tfidf)
val train = zippedTrain.map{ case(text,vector) => LabeledPoint(categories(text(1)),vector) }
train.cache

val testTf = testSet.map(x => hashingTF.transform(tokenize(x(0))))
val testTfIdf = idf.transform(testTf)

val zippedTest = testSet.zip(testTfIdf)
val test = zippedTest.map{ case(text,vector) => LabeledPoint(categories(text(1)).toDouble,vector) }
test.cache

---- Multiclass logistic regression --------------

import org.apache.spark.mllib.classification.{LogisticRegressionModel, LogisticRegressionWithLBFGS}
val numIterations = 100
val model = new LogisticRegressionWithLBFGS().setNumClasses(5).run(train)

val validPredicts =  test.map(p => (model.predict(p.features),p.label))

validPredicts.take(20)
res7: Array[(Double, Double)] = Array((2.0,4.0), (3.0,1.0), (3.0,3.0), (3.0,3.0), (1.0,3.0), (3.0,2.0), (1.0,1.0), (3.0,3.0), (1.0,1.0), (3.0,3.0), (4.0,0.0), (0.0,2.0), (3.0,3.0), (3.0,3.0), (3.0,3.0), (0.0,0.0), (3.0,3.0), (4.0,3.0), (3.0,3.0), (3.0,3.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 84064
validPredicts.count                            // 113375
val accuracy = metrics.accuracy   // 0.7414685777287762

---- MLlib Maive Bayes regression --------------

import org.apache.spark.mllib.classification.NaiveBayes
val model = NaiveBayes.train(train)

val validPredicts =  test.map(p => (model.predict(p.features),p.label))

validPredicts.take(20)
res10: Array[(Double, Double)] = Array((4.0,4.0), (1.0,1.0), (3.0,3.0), (3.0,3.0), (3.0,3.0), (3.0,2.0), (1.0,1.0), (3.0,3.0), (1.0,1.0), (0.0,3.0), (0.0,0.0), (1.0,2.0), (3.0,3.0), (3.0,3.0), (3.0,3.0), (0.0,0.0), (3.0,3.0), (4.0,3.0), (3.0,3.0), (3.0,3.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 73100
validPredicts.count                            // 113375
val accuracy = metrics.accuracy   // 0.6447629547960309